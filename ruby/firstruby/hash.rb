#!/usr/bin/ruby -w -d
# -*- coding: UTF-8 -*- 
# 中文编码

puts "Hello World!", "Start"
months = Hash.new
puts months

puts "创建带默认值的"
months = Hash.new("month")  
puts months
months = Hash.new "month"
puts months

puts "找到返回， 找不到返回默认值"
puts "#{months[0]}"
puts "#{months[72]}"

H = Hash["a"=>100, "b"=>200]
puts "#{H['a']}"
puts "#{H['b']}"

puts "哈希内置方法"
puts "Hash[[key =>|, value]* ] or"
puts "Hash.new [or] Hash.new(obj) [or]"
puts "Hash.new { |hash, key| block }"
$, = ", "
months = Hash.new("month")
months = {"1"=>"January", "2"=>"February"}
keys = months.keys
puts "#{keys}"

puts "序号	方法 & 描述"
puts "1	hash == other_hash"
puts "检查两个哈希是否具有相同的键值对个数，键值对是否相互匹配，来判断两个哈希是否相等。"
puts "2	hash[key]"
puts "使用键，从哈希引用值。如果未找到键，则返回默认值。"
puts "3	hash[key]=value"
puts "把 value 给定的值与 key 给定的键进行关联。"
puts "4	hash.clear"
puts "从哈希中移除所有的键值对。"
puts "5	hash.default(key = nil)"
puts "返回 hash 的默认值，如果未通过 default= 进行设置，则返回 nil。（如果键在 hash 中不存在，则 [] 返回一个默认值。）"
puts "6	hash.default = obj"
puts "为 hash 设置默认值。"
puts "7	hash.default_proc"
puts "如果 hash 通过块来创建，则返回块。"
puts "8	hash.delete(key) [or]"
puts "array.delete(key) { |key| block }"
puts "通过 key 从 hash 中删除键值对。如果使用了块 且未找到匹配的键值对，则返回块的结果。把它与 delete_if 进行比较。"
puts "9	hash.delete_if { |key,value| block }"
puts "block 为 true 的每个块，从 hash 中删除键值对。"
puts "10	hash.each { |key,value| block }"
puts "遍历 hash，为每个 key 调用一次 block，传递 key-value 作为一个二元素数组。"
puts "11	hash.each_key { |key| block }"
puts "遍历 hash，为每个 key 调用一次 block，传递 key 作为参数。"
puts "12	hash.each_key { |key_value_array| block }"
puts "遍历 hash，为每个 key 调用一次 block，传递 key 和 value 作为参数。"
puts "13	hash.each_value { |value| block }"
puts "遍历 hash，为每个 key 调用一次 block，传递 value 作为参数。"
puts "14	hash.empty?"
puts "检查 hash 是否为空（不包含键值对），返回 true 或 false。"
puts "15	hash.fetch(key [, default] ) [or]"
puts "hash.fetch(key) { | key | block }"
puts "通过给定的 key 从 hash 返回值。如果未找到 key，且未提供其他参数，则抛出 IndexError 异常；如果给出了 default，则返回 default；如果指定了可选的 block，则返回 block 的结果。"
puts "16	hash.has_key?(key) [or] hash.include?(key) [or]"
puts "hash.key?(key) [or] hash.member?(key)"
puts "检查给定的 key 是否存在于哈希中，返回 true 或 false。"
puts "17	hash.has_value?(value)"
puts "检查哈希是否包含给定的 value。"
puts "18	hash.index(value)"
puts "为给定的 value 返回哈希中的 key，如果未找到匹配值则返回 nil。"
puts "19	hash.indexes(keys)"
puts "返回一个新的数组，由给定的键的值组成。找不到的键将插入默认值。该方法已被废弃，请使用 select。"
puts "20	hash.indices(keys)"
puts "返回一个新的数组，由给定的键的值组成。找不到的键将插入默认值。该方法已被废弃，请使用 select。"
puts "21	hash.inspect"
puts "返回哈希的打印字符串版本。"
puts "22	hash.invert"
puts "创建一个新的 hash，倒置 hash 中的 keys 和 values。也就是说，在新的哈希中，hash 中的键将变成值，值将变成键。"
puts "23	hash.keys"
puts "创建一个新的数组，带有 hash 中的键。"
puts "24	hash.length"
puts "以整数形式返回 hash 的大小或长度。"
puts "25	hash.merge(other_hash) [or]"
puts "hash.merge(other_hash) { |key, oldval, newval| block }"
puts "返回一个新的哈希，包含 hash 和 other_hash 的内容，重写 hash 中与 other_hash 带有重复键的键值对。"
puts "26	hash.merge!(other_hash) [or]"
puts "hash.merge!(other_hash) { |key, oldval, newval| block }"
puts "与 merge 相同，但实际上 hash 发生了变化。"
puts "27	hash.rehash"
puts "基于每个 key 的当前值重新建立 hash。如果插入后值发生了改变，该方法会重新索引 hash。"
puts "28	hash.reject { |key, value| block }"
puts "类似 delete_if, 但作用在一个拷贝的哈希上。相等于 hsh.dup.delete_if。"
puts "29	hash.reject! { |key, value| block }"
puts "相等于 delete_if, 但是如果没有修改，返回 nil。"
puts "30	hash.replace(other_hash)"
puts "把 hash 的内容替换为 other_hash 的内容。"
puts "31	hash.select { |key, value| block }"
puts "返回一个新的数组，由 block 返回 true 的 hash 中的键值对组成。"
puts "32	hash.shift"
puts "从 hash 中移除一个键值对，并把该键值对作为二元素数组返回。"
puts "33	hash.size"
puts "以整数形式返回 hash 的 size 或 length。"
puts "34	hash.sort"
puts "把 hash 转换为一个包含键值对数组的二维数组，然后进行排序。"
puts "35	hash.store(key, value)"
puts "存储 hash 中的一个键值对。"
puts "36	hash.to_a"
puts "从 hash 中创建一个二维数组。每个键值对转换为一个数组，所有这些数组都存储在一个数组中。"
puts "37	hash.to_hash"
puts "返回 hash（self）。"
puts "38	hash.to_s"
puts "把 hash 转换为一个数组，然后把该数组转换为一个字符串。"
puts "39	hash.update(other_hash) [or]"
puts "hash.update(other_hash) {|key, oldval, newval| block}"
puts "返回一个新的哈希，包含 hash 和 other_hash 的内容，重写 hash 中与 other_hash 带有重复键的键值对。"
puts "40	hash.value?(value)"
puts "检查 hash 是否包含给定的 value。"
puts "41	hash.values"
puts "返回一个新的数组，包含 hash 的所有值。"
puts "42	hash.values_at(obj, ...)"
puts "返回一个新的数组，包含 hash 中与给定的键相关的值。"

puts "End"