#!/usr/bin/ruby -w -d
# -*- coding: UTF-8 -*- 
# 中文编码

puts "Hello world!"

puts "Start"
names = Array.new
puts names, names.length

names = Array.new(20)
puts names.length

names = Array.new(4, "mac")
print names, ' '

names = Array.new(10) { |e| e = e * 2 }
print names , "\n"

names = Array.[](1, 2, 3, 4.5)
print names, "\n"

names = Array[1, 2, 3, 4.5]
print names, "\n"

names = Array(0..9)
print names, "\n"

puts "数组内建方法"
digits = Array(0..9)
num = digits.at(6)
puts "#{num}"


puts "序号	方法 & 描述"
puts "1	array & other_array"
puts "返回一个新的数组，包含两个数组中共同的元素，没有重复。"
puts "2	array * int [or] array * str"
puts "返回一个新的数组，新数组通过连接 self 的 int 副本创建的。带有 String 参数时，相当于 self.join(str)。"
puts "3	array + other_array"
puts "返回一个新的数组，新数组通过连接两个数组产生第三个数组创建的。"
puts "4	array - other_array"
puts "返回一个新的数组，新数组是从初始数组中移除了在 other_array 中出现的项的副本。"
puts "5	str <=> other_str"
puts "把 str 与 other_str 进行比较，返回 -1（小于）、0（等于）或 1（大于）。比较是区分大小写的。"
puts "6	array | other_array"
puts "通过把 other_array 加入 array 中，移除重复项，返回一个新的数组。"
puts "7	array << obj"
puts "把给定的对象附加到数组的末尾。该表达式返回数组本身，所以几个附加可以连在一起。"
puts "8	array <=> other_array"
puts "如果数组小于、等于或大于 other_array，则返回一个整数（-1、 0 或 +1）。"
puts "9	array == other_array"
puts "如果两个数组包含相同的元素个数，且每个元素与另一个数组中相对应的元素相等（根据 Object.==），那么这两个数组相等。"
puts "10	array[index] [or] array[start, length] [or]"
puts "array[range] [or] array.slice(index) [or]"
puts "array.slice(start, length) [or] array.slice(range)"
puts "返回索引为 index 的元素，或者返回从 start 开始直至 length 个元素的子数组，或者返回 range 指定的子数组。负值索引从数组末尾开始计数（-1 是最后一个元素）。如果 index（或开始索引）超出范围，则返回 nil。"
puts "11	array[index] = obj [or]"
puts "array[start, length] = obj or an_array or nil [or]"
puts "array[range] = obj or an_array or nil"
puts "设置索引为 index 的元素，或者替换从 start 开始直至 length 个元素的子数组，或者替换 range 指定的子数组。如果索引大于数组的当前容量，那么数组会自动增长。负值索引从数组末尾开始计数。如果 length 为零则插入元素。如果在第二种或第三种形式中使用了 nil，则从 self 删除元素。"
puts "12	array.abbrev(pattern = nil)"
puts "为 self 中的字符串计算明确的缩写集合。如果传递一个模式或一个字符串，只考虑当字符串匹配模式或者以该字符串开始时的情况。"
puts "13	array.assoc(obj)"
puts "搜索一个数组，其元素也是数组，使用 obj.== 把 obj 与每个包含的数组的第一个元素进行比较。如果匹配则返回第一个包含的数组，如果未找到匹配则返回 nil。"
puts "14	array.at(index)"
puts "返回索引为 index 的元素。一个负值索引从 self 的末尾开始计数。如果索引超出范围则返回 nil。"
puts "15	array.clear"
puts "从数组中移除所有的元素。"
puts "16	array.collect { |item| block } [or]"
puts "array.map { |item| block }"
puts "为 self 中的每个元素调用一次 block。创建一个新的数组，包含 block 返回的值。"
puts "17	array.collect! { |item| block } [or]"
puts "array.map! { |item| block }"
puts "为 self 中的每个元素调用一次 block，把元素替换为 block 返回的值。"
puts "18	array.compact"
puts "返回 self 的副本，移除了所有的 nil 元素。"
puts "19	array.compact!"
puts "从数组中移除所有的 nil 元素。如果没有变化则返回 nil。"
puts "20	array.concat(other_array)"
puts "追加 other_array 中的元素到 self 中。"
puts "21	array.delete(obj) [or]"
puts "array.delete(obj) { block }"
puts "从 self 中删除等于 obj 的项。如果未找到相等项，则返回 nil。如果未找到相等项且给出了可选的代码 block，则返回 block 的结果。"
puts "22	array.delete_at(index)"
puts "删除指定的 index 处的元素，并返回该元素。如果 index 超出范围，则返回 nil。"
puts "23	array.delete_if { |item| block }"
puts "当 block 为 true 时，删除 self 的每个元素。"
puts "24	array.each { |item| block }"
puts "为 self 中的每个元素调用一次 block，传递该元素作为参数。"
puts "25	array.each_index { |index| block }"
puts "与 Array#each 相同，但是传递元素的 index，而不是传递元素本身。"
puts "26	array.empty?"
puts "如果数组本身没有包含元素，则返回 true。"
puts "27	array.eql?(other)"
puts "如果 array 和 other 是相同的对象，或者两个数组带有相同的内容，则返回 true。"
puts "28	array.fetch(index) [or]"
puts "array.fetch(index, default) [or]"
puts "array.fetch(index) { |index| block }"
puts "尝试返回位置 index 处的元素。如果 index 位于数组外部，则第一种形式会抛出 IndexError 异常，第二种形式会返回 default，第三种形式会返回调用 block 传入 index 的值。负值的 index 从数组末尾开始计数。"
puts "29	array.fill(obj) [or]"
puts "array.fill(obj, start [, length]) [or]"
puts "array.fill(obj, range) [or]"
puts "array.fill { |index| block } [or]"
puts "array.fill(start [, length] ) { |index| block } [or]"
puts "array.fill(range) { |index| block }"
puts "前面三种形式设置 self 的被选元素为 obj。以 nil 开头相当于零。nil 的长度相当于 self.length。最后三种形式用 block 的值填充数组。block 通过带有被填充的每个元素的绝对索引来传递。"
puts "30	array.first [or]"
puts "array.first(n)"
puts "返回数组的第一个元素或前 n 个元素。如果数组为空，则第一种形式返回 nil，第二种形式返回一个空的数组。"
puts "31	array.flatten"
puts "返回一个新的数组，新数组是一个一维的扁平化的数组（递归）。"
puts "32	array.flatten!"
puts "把 array 进行扁平化。如果没有变化则返回 nil。（数组不包含子数组。）"
puts "33	array.frozen?"
puts "如果 array 被冻结（或排序时暂时冻结），则返回 true。"
puts "34	array.hash"
puts "计算数组的哈希代码。两个具有相同内容的数组将具有相同的哈希代码。"
puts "35	array.include?(obj)"
puts "如果 self 中包含 obj，则返回 true，否则返回 false。"
puts "36	array.index(obj)"
puts "返回 self 中第一个等于 obj 的对象的 index。如果未找到匹配则返回 nil。"
puts "37	array.indexes(i1, i2, ... iN) [or]"
puts "array.indices(i1, i2, ... iN)"
puts "该方法在 Ruby 的最新版本中被废弃，所以请使用 Array#values_at。"
puts "38	array.indices(i1, i2, ... iN) [or]"
puts "array.indexes(i1, i2, ... iN)"
puts "该方法在 Ruby 的最新版本中被废弃，所以请使用 Array#values_at。"
puts "39	array.insert(index, obj...)"
puts "在给定的 index 的元素前插入给定的值，index 可以是负值。"
puts "40	array.inspect"
puts "创建一个数组的可打印版本。"
puts "41	array.join(sep=$,)"
puts "返回一个字符串，通过把数组的每个元素转换为字符串，并使用 sep 分隔进行创建的。"
puts "42	array.last [or] array.last(n)"
puts "返回 self 的最后一个元素。如果数组为空，则第一种形式返回 nil。"
puts "43	array.length"
puts "返回 self 中元素的个数。可能为零。"
puts "44	array.map { |item| block } [or]"
puts "array.collect { |item| block }"
puts "为 self 的每个元素调用一次 block。创建一个新的数组，包含 block 返回的值。"
puts "45	array.map! { |item| block } [or]"
puts "array.collect! { |item| block }"
puts "为 array 的每个元素调用一次 block，把元素替换为 block 返回的值。"
puts "46	array.nitems"
puts "返回 self 中 non-nil 元素的个数。可能为零。"
puts "47	array.pack(aTemplateString)"
puts "根据 aTemplateString 中的指令，把数组的内容压缩为二进制序列。指令 A、 a 和 Z 后可以跟一个表示结果字段宽度的数字。剩余的指令也可以带有一个表示要转换的数组元素个数的数字。如果数字是一个星号（*），则所有剩余的数组元素都将被转换。任何指令后都可以跟一个下划线（_），表示指定类型使用底层平台的本地尺寸大小，否则使用独立于平台的一致的尺寸大小。在模板字符串中空格会被忽略。"
puts "48	array.pop"
puts "从 array 中移除最后一个元素，并返回该元素。如果 array 为空则返回 nil。"
puts "49	array.push(obj, ...)"
puts "把给定的 obj 附加到数组的末尾。该表达式返回数组本身，所以几个附加可以连在一起。"
puts "50	array.rassoc(key)"
puts "搜索一个数组，其元素也是数组，使用 == 把 key 与每个包含的数组的第二个元素进行比较。如果匹配则返回第一个包含的数组。"
puts "51	array.reject { |item| block }"
puts "返回一个新的数组，包含当 block 不为 true 时的数组项。"
puts "52	array.reject! { |item| block }"
puts "当 block 为真时，从 array 删除元素，如果没有变化则返回 nil。相当于 Array#delete_if。"
puts "53	array.replace(other_array)"
puts "把 array 的内容替换为 other_array 的内容，必要的时候进行截断或扩充。"
puts "54	array.reverse"
puts "返回一个新的数组，包含倒序排列的数组元素。"
puts "55	array.reverse!"
puts "把 array 进行逆转。"
puts "56	array.reverse_each {|item| block }"
puts "与 Array#each 相同，但是把 array 进行逆转。"
puts "57	array.rindex(obj)"
puts "返回 array 中最后一个等于 obj 的对象的索引。如果未找到匹配，则返回 nil。"
puts "58	array.select {|item| block }"
puts "调用从数组传入连续元素的 block，返回一个数组，包含 block 返回 true 值时的元素。"
puts "59	array.shift"
puts "返回 self 的第一个元素，并移除该元素（把所有的其他元素下移一位）。如果数组为空，则返回 nil。"
puts "60	array.size"
puts "返回 array 的长度（元素的个数）。length 的别名。"
puts "61	array.slice(index) [or] array.slice(start, length) [or]"
puts "array.slice(range) [or] array[index] [or]"
puts "array[start, length] [or] array[range]"
puts "返回索引为 index 的元素，或者返回从 start 开始直至 length 个元素的子数组，或者返回 range 指定的子数组。负值索引从数组末尾开始计数（-1 是最后一个元素）。如果 index（或开始索引）超出范围，则返回 nil。"
puts "62	array.slice!(index) [or] array.slice!(start, length) [or]"
puts "array.slice!(range)"
puts "删除 index（长度是可选的）或 range 指定的元素。返回被删除的对象、子数组，如果 index 超出范围，则返回 nil。"
puts "63	array.sort [or] array.sort { | a,b | block }"
puts "返回一个排序的数组。"
puts "64	array.sort! [or] array.sort! { | a,b | block }"
puts "把数组进行排序。"
puts "65	array.to_a"
puts "返回 self。如果在 Array 的子类上调用，则把接收参数转换为一个 Array 对象。"
puts "66	array.to_ary"
puts "返回 self。"
puts "67	array.to_s"
puts "返回 self.join。"
puts "68	array.transpose"
puts "假设 self 是数组的数组，且置换行和列。"
puts "69	array.uniq"
puts "返回一个新的数组，移除了 array 中的重复值。"
puts "70	array.uniq!"
puts "从 self 中移除重复元素。如果没有变化（也就是说，未找到重复），则返回 nil。"
puts "71	array.unshift(obj, ...)"
puts "把对象前置在数组的前面，其他元素上移一位。"
puts "72	array.values_at(selector,...)"
puts "返回一个数组，包含 self 中与给定的 selector（一个或多个）相对应的元素。选择器可以是整数索引或者范围。"
puts "73	array.zip(arg, ...) [or]"
puts "array.zip(arg, ...){ | arr | block }"
puts "把任何参数转换为数组，然后把 array 的元素与每个参数中相对应的元素合并。"




puts "\n数组 pack 指令"
puts " 指令	描述"
puts " @	移动到绝对位置。"
puts " A	ASCII 字符串（填充 space，count 是宽度）。"
puts " a	ASCII 字符串（填充 null，count 是宽度）。"
puts " B	位字符串（降序）"
puts " b	位字符串（升序）。"
puts " C	无符号字符。"
puts " c	字符。"
puts " D, d	双精度浮点数，原生格式。"
puts " E	双精度浮点数，little-endian 字节顺序。"
puts " e	单精度浮点数，little-endian 字节顺序。"
puts " F, f	单精度浮点数，原生格式。"
puts " G	双精度浮点数，network（big-endian）字节顺序。"
puts " g	单精度浮点数，network（big-endian）字节顺序。"
puts " H	十六进制字符串（高位优先）。"
puts " h	十六进制字符串（低位优先）。"
puts " I	无符号整数。"
puts " i	整数。"
puts " L	无符号 long。"
puts " l	Long。"
puts " M	引用可打印的，MIME 编码。"
puts " m	Base64 编码字符串。"
puts " N	Long，network（big-endian）字节顺序。"
puts " n	Short，network（big-endian）字节顺序。"
puts " P	指向一个结构（固定长度的字符串）。"
puts " p	指向一个空结束字符串。"
puts " Q, q	64 位数字。"
puts " S	无符号 short。"
puts " s	Short。"
puts " U	UTF-8。"
puts " u	UU 编码字符串。"
puts " V	Long，little-endian 字节顺序。"
puts " v	Short，little-endian 字节顺序。"
puts " w	BER 压缩的整数 \fnm。"
puts " X	向后跳过一个字节。"
puts " x	Null 字节。"
puts " Z	与 a 相同，除了 null 会被加上 *。"


puts "实例"
a = [ "a", "b", "c" ]
n = [ 65, 66, 67 ]
puts a.pack("A3A3A3")   #=> "a  b  c  "
puts a.pack("a3a3a3")   #=> "a\000\000b\000\000c\000\000"
puts n.pack("ccc")      #=> "ABC"

puts "End"