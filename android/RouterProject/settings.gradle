dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        println("[根目录settings.gradle] repositories")
        maven {
            url uri("/Users/flannery/Desktop/AndroidHelper/repo")
        }
//        maven { url 'http://repo.duowan.com:8181/nexus/content/groups/public' }
        google()
        mavenCentral()
        jcenter() // Warning: this repository is going to shut down soon
    }
}
rootProject.name = "RouterProject"
include ':app'
include ':module_1'
include ':module_2'
include ':router-annotations'


gradle.addBuildListener(new BuildAdapter() {
    @Override
    void beforeSettings(Settings settings) {
        super.beforeSettings(settings)
        println("[LISTENER] beforeSettings")
    }

    @Override
    void settingsEvaluated(Settings settings) {
        super.settingsEvaluated(settings)
        println("[LISTENER] settingsEvaluated")
    }

    @Override
    void projectsLoaded(Gradle gradle) {
        super.projectsLoaded(gradle)
        println("[LISTENER] projectsLoaded")
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        super.projectsEvaluated(gradle)
        println("[LISTENER] projectsEvaluated")
    }

    @Override
    void buildFinished(BuildResult result) {
        super.buildFinished(result)
        println("[LISTENER] buildFinished")
    }
})

gradle.beforeProject {
    Project p = it
    String path = p.getProjectDir().absolutePath
    println("[beforeProject] Evaluation of $path")
}

gradle.afterProject {
    Project p = it
    String path = p.getProjectDir().absolutePath
    println("[afterProject] Evaluation of $path")
//    if (state.failure != null) {
//        println("Evaluation of $project FAILED")
//    } else {
//        println("Evaluation of $project succeeded")
//    }
}
