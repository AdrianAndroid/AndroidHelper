import org.json.JSONObject

// https://blog.csdn.net/bencheng06/article/details/83628859


//plugins {
//    id 'com.android.library'
//    id 'kotlin-android'
//    //id "de.undercouch.download"
////    from '../efox.gradle'
//}
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

//    println ("getRootProject().name ===> ${getRootProject().name}")
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

String TAG = "library - [build.gradle]"

beforeEvaluate {
    println "library - [build.gradle] beforeEvaluate"
}

// 统计打包时长
def buildStartTime, buildEndTime
afterEvaluate {
    println "library - [build.gradle] afterEvaluate"
    //保证要找到的task执行完毕
    def proBuildTask = project.tasks.getByName("preBuild")
    proBuildTask.doFirst {
        buildStartTime = System.currentTimeMillis()
        println("$TAG build start time is ${buildStartTime}")
    }
    proBuildTask.doLast {
        buildEndTime = System.currentTimeMillis()
        println "$TAG build end time is ${buildEndTime}"

        println "$TAG the build used time is ${buildEndTime - buildStartTime}"
    }
}

task printName {
    setGroup("study")
    setDescription("study")
    println "$TAG printName"
    doFirst {
        println "$TAG 在APP project 中打印一句话"
    }
}

task aaa {

    setGroup("study")
    setDescription("study")
    println "$TAG _____________________aaa______${this.tasks.findByPath(":library:printName").name}"
    doLast {
        println "$TAG ___________________________${this.tasks.findByPath(":library:printName").name}"

//        print "$TAG 当前获取到的compileSdkVersion属性是：${this.ext.android.compileSdkVersion}"
    }
}

gradle.buildFinished {
    println "library - [build.gradle] gradle.buildFinished"
//    getAllTasks(true).each {
//        println "library - [build.gradle] ${it.key} = ${it.value}\n"
//    }
}

task testNewTask() {
    println("$TAG testNewTask")
    doFirst {
        println("$TAG testNewTask doFirst")
    }
    doLast {
        println("$TAG testNewTask doLast")
    }
}

tasks.create(name: 'hellozj') {
    println("$TAG hellozj ")
}

//group---------task所在的分组，所有的task将按照这个分组归类，方便我们以后的查看
//description---对当前task的描述，方便阅读
//name----------指定当前task的名称
//type----------指定当前task的类型
//dependsOn-----指定当前task与其他task之间的依赖关系
//overwirte-----重写执行task
//action--------为task配置执行的逻辑
task helloTask {
    setGroup("study")
    setDescription("创建学习")
    println "$TAG 我执行在 hello task 的配置阶段"

    doFirst {
        println "$TAG doFirst 1     我执行在 hello task 已有的的task之前"
    }
    doFirst {
        println "$TAG doFirst 2     我执行在 hello task 已有的task之前"
    }
    doLast {
        println "$TAG doLast 1   我执行在 hello task 已有的task之后"
    }
    doLast {
        println "$TAG doLast 2   我执行在 hello task 已有的task之后"
    }
}


helloTask.doFirst {
    println "$TAG helloTask.doFirst 3      我执行在 hello task 已有的task之前"
}


helloTask.doLast {
    println "$TAG helloTask.doLast 3       我执行在 hello task 已有的task之后"
}

//apply from: '../efox.gradle'


// 学生端
Boolean isTeachee() { return "teacheemaster".equals(getRootProject().name) }

// 机构端
Boolean isEducator() { return "Educator".equals(getRootProject().name) }


class NewTask extends DefaultTask {

}
//
//rootProject.afterEvaluate { p->
//    println("-----------------${p.name} ")
//    downloadEfox()
//}

//初始化对应groovy中的初始化阶段，主要是读取setting文件，获取所有的projec和task
//配置阶段主要根据依赖关系组成有线无环图，同时完成task中变量的初始化，方法的执行（简单理解：创建的任务没有放在doFirst和doLast中的代码全部都会在配置阶段执行）
//执行阶段，定义在doFirst和doLast 中代码执行在构建后的执行阶段

task downloadEfox(type: DefaultTask) {
//    setDependsOn([clean])
    setGroup("[efox]")
    setDescription("[efox]")
    println("$TAG downloadEfox")
    doFirst {
        println("$TAG downloadEfox doFirst")
        //setDependsOn([clean])
        //http://multi-lang.duowan.com/multiLangBig/Teachee/iOS_1_9_0___1_9_0/ko.json
        long start = System.currentTimeMillis()
        def projectPath = "Teachee___2_3_0" // 项目
//    def projectPath = "iOS_1_9_0___1_9_0"
        def key_values = "values"
        def key_values_ko = "values-ko"
        //
        def valuesDir = [
                "$key_values"   : "en",
                "$key_values_ko": "ko",
                //"values-zh" : "zh",
        ]
        // 每个文件夹存放所有的key
        def listJsonObject = [
                "$key_values"   : new JSONObject(),
                "$key_values_ko": new JSONObject()
        ] //把所有的字符串都下载下来
        print("\n $listJsonObject")


        File buildTmpValue = new File(buildDir, "tmp${File.separator}values") // 先保存到临时目录
        buildTmpValue.deleteOnExit()
        buildTmpValue.mkdirs()


        valuesDir.forEach({ value, path ->
            def pathJson = "${path}.json"
            def url_path = "http://multi-lang.duowan.com/multiLangBig/Teachee/${projectPath}/${pathJson}?time=${System.currentTimeSeconds()}"

            // 读取字符串
            JSONObject jo = new JSONObject(readStringFromUrl(url_path))
            JSONObject jo_data = jo.optJSONObject("data")
            listJsonObject.put(value, jo_data) // 保存所有的jsonObject， 要有过滤功能
        })

        print("\n $listJsonObject")

        // 以第一个为准， 读取文件
        if (!listJsonObject.isEmpty()) {
            def fjo = listJsonObject.get("$key_values")
            assert fjo instanceof JSONObject

            int count = fjo.length()
            // 先判断是否等长
            listJsonObject.forEach({ key, jo ->
                assert count == jo.length()
            })
            // 直接查看是否所有的key都相同,因为已经判断了length
            Iterator iter = fjo.keys()
            while (iter.hasNext()) { // 遍历所有的key
                def key = iter.next()
                print("\n key = $key")
                listJsonObject.forEach({ _, JSONObject jo ->
                    assert jo.has(key) // 不包含，直接崩溃，gradle时间太长
                })
            }

            // res/value文件夹
            def res_value = new StringBuilder()
                    .append(getProjectDir().absolutePath)
                    .append(File.separator).append("src")
                    .append(File.separator).append("main")
                    .append(File.separator).append("res")
                    .append(File.separator).toString()
            print("\nres_value = $res_value")

            // 写入新文件
            // values    : ["key":"value]
            // values-ko : ["key":"value"]
            listJsonObject.forEach({ key, JSONObject jo ->
                // 检查目录是否存在
                File file = new File(res_value, key)
                if (!file.exists()) file.mkdirs()
                // 删除原先生成的commonstring.xml， 这个不进行版本控制
                File xmlFile = new File(file, "commonstring.xml") // 要存放的地址
                println("[xmlFile] = ${xmlFile.absolutePath}")

                if (xmlFile.exists() && xmlFile.size() > 0) { // 存在，才做增量更新
                    // 增量更新
                    HashMap<String, String> hashMap = readXmlToHashMap(xmlFile) // 读取原有数据
                    hashMap = incremental(hashMap, jo)
                    writeHashMapToFile(xmlFile, hashMap)
                } else {
                    // 找到File
                    writeXmlToFile(xmlFile, jo) // 统一文件
                }
            })
        }

//    def branchName = getBranchName()
//    println "\n分支名称 ： $branchName"
        println "\n分支名称 ： ${System.currentTimeSeconds()}"

        long end = System.currentTimeMillis()
        println "time=${end - start}"
        println "time=${end - start}"
        println "time=${end - start}"
        println "time=${end - start}"
        println "time=${end - start}"
        println "time=${end - start}"
        println "time=${end - start}"
        println "time=${end - start}"
        println "time=${end - start}"
    }
}

static HashMap<String, String> incremental(HashMap<String, String> hashMap, JSONObject jo) {
    // 1。 把JSONObject中的文件拿出来，
    //     有相同的，直接提示，手动删除
    //     增量更新的直接加入
    // 所有的内容
    def key = jo.keys()
    while (key.hasNext()) {
        def k = key.next()
        //TDDO assert hashMap.containsKey(k), "按照规定，efox和本地不能有重复，删除efox，保留本地【可手动修改本地】"
        def v = jo.getString(k)
        if (check_validate(k) && !hashMap.containsKey(k)) {
            println(">>>>[新增] key=$k, value=$v")
            hashMap.put(k, v) // 若没有此key，直接删除即可
        } else {
            println(">>>>[不能加入] key=$k, value=$v  (已有数据或者不合格Key数据)")
//            assert false, "不能有重复数据"
        }
//        if (check_validate(k)) {
//            bufferedWriter.writeLine(generatXmlStringitem(k, jo.getString(k)))
//        } else { //不符合要求
//            print("\n 不符合要求 ：$k ")
//        }
    }
    return hashMap
}

static String getBranchName() {
    def process = ("git branch").execute(null, getRootDir())
    def result = process.waitFor()
    if (result != 0) assert false, "没有找git分支!!!!"
    List<String> lines = process.text.readLines()
    String branchName = null
    if (lines.isEmpty()) {
        //branchName = 'master'
        assert false, "git branch 得到的结果为空!!!"
    } else {
        lines.each {
            if (it.startsWith("*")) {
                branchName = it.substring(1)
                // return
            }
        }
    }
    if (branchName == null) assert false, "错啦，没找到具体的分支！！！"
    return branchName
}

// 从网络读取内容
String readStringFromUrl(String url_path) {
    //https://blog.csdn.net/zhangmiao301/article/details/80839676
    URL url = new URL(url_path)
    HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection()
    httpURLConnection.setConnectTimeout(5000)
    httpURLConnection.setRequestMethod("GET")
    httpURLConnection.connect()
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream()))
//    String line = null
    StringBuffer stringBuffer = new StringBuffer()
    String json = "";
    while ((json = bufferedReader.readLine()) != null) {
        stringBuffer.append(json);
    }
    String rsp = new String(stringBuffer.toString().getBytes(), "UTF-8")
    bufferedReader.close()
    httpURLConnection.disconnect()
    print("\n---->$rsp")
    return rsp
}

// 要做增量更新
void writeHashMapToFile(File file, HashMap<String, String> map) {
    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file, false)))
    bufferedWriter.writeLine("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
    bufferedWriter.writeLine("<resources>")
    map.entrySet().forEach({ entry ->
        if (check_validate(entry.getKey())) {
            bufferedWriter.writeLine(generatXmlStringitem(entry.getKey(), entry.getValue()))
        } else { //不符合要求
            print("\n 不符合要求 ：$entry ")
        }
    })
    bufferedWriter.writeLine("</resources>")
    bufferedWriter.flush()
    bufferedWriter.close()
}


void writeXmlToFile(File file, JSONObject jo) {
    //BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream()))
    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file, false))) //
    // 重新写文件
    bufferedWriter.writeLine("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
    bufferedWriter.writeLine("<resources>")
    // 所有的内容
    def key = jo.keys()
    while (key.hasNext()) {
        def k = key.next()
        if (check_validate(k)) {
            bufferedWriter.writeLine(generatXmlStringitem(k, jo.getString(k)))
        } else { //不符合要求
            print("\n 不符合要求 ：$k ")
        }
    }
    bufferedWriter.writeLine("</resources>")
    bufferedWriter.flush()
    bufferedWriter.close()
}

static Boolean check_validate(String str) {
    for (i in 0..<str.length()) {
        int c = str.charAt(i)
        if (i == 0 && !Character.isLowerCase(c)) { //只能为小写字母
            return false
        } else if (!(Character.isLowerCase(c) || Character.isDigit(c) || '_' == c)) {
            return false
        }
    }
    return true
}

String generatXmlStringitem(String key, String value) {
    if (key == null || key.isEmpty()) {
        throw IllegalArgumentException("key 不能为空！！！")
    }
    if (value == null || value.isEmpty()) {
        throw new IllegalArgumentException("value 不能为空！！！")
    }
    def str = "        <string name=\"${key}\">${value}</string>"
    print("\n $str")
    return str
}

// 把本地文件全部读出来
static HashMap<String, String> readXmlToHashMap(File xmlFile) {
    assert xmlFile.exists() && xmlFile.size() > 0 //这里不能为空，按理说已经判断了
    println ">>>>>>>>>>>>>>>>>>>>"
    def xml = new XmlParser().parse(xmlFile) // 读出来
    println xml.children().size()
    println ">>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    def hashMap = new LinkedHashMap() // 现在可以为空
    xml.children().forEach({
        if (it instanceof Node) {
            def key = it.attributes()['name']
            def value = ((List) it.value()).get(0)
            assert null == hashMap.put(key, value), "不能有重复的值，直接报错，请删除原先文件中的${key}"
        }
    })
    println ">>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    println ">>>>>>>>>>>打印HashMap>>>>>>>>>>>>>>>>>"
    hashMap.forEach({ key, value ->
        println "$key =*******= $value"
    })
    println ">>>>>>>>>>>结束HashMap>>>>>>>>>>>>>>>>>"
    //println xml
    return hashMap
}

static void readXmlMethod(String url) {
    println ">>>>>>>>>>>>>>>>>>>>"
    println ">>>>>>>>>>>>>>>>>>>>"
    println ">>>>>>>>>>>>>>>>>>>>"
    println ">>>>>>>>>>>>>>>>>>>>"
    println ">>>>>>>>>>>>>>>>>>>>"
    println ">>>>>>>>>>>>>>>>>>>>"
    println ">>>>>>>>>>>>>>>>>>>>"
    println ">>>>>>>>>>>>>>>>>>>>"
    File f = new File(url);
    assert f.exists()


    def xml = new XmlParser().parse(f) // 读出来
    //println xml.attributes()
//    println xml.children()
    println xml.children().size()
    println ">>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    // 第一版
//    xml.children().forEach({
//        if (it instanceof NodeList) {
//            println "it instanceof NodeList"
//        } else if (it instanceof Node) {
//            println "it instanceof Node"
//        }
//    })
    // 第二版
//    xml.children().forEach({
//        if (it instanceof Node) {
//            if (it.value() instanceof List) {
//                List ll = (List) it.value()
//                println ll.get(0)
//            }
//        }
//    })
    // 第三版
//    xml.children().forEach({
//        if (it instanceof Node) {
//            def key = it.attributes()['name']
//            def value = ((List) it.value()).get(0)
//            println "$key \t\t====\t\t $value"
//            println()
//        }
//    })
//    println("xml.children() instanceof List => ${xml.children() instanceof List}")
    def hashMap = new LinkedHashMap()
    xml.children().forEach({
        if (it instanceof Node) {
            def key = it.attributes()['name']
            def value = ((List) it.value()).get(0)
            assert null == hashMap.put(key, value), "不能有重复的值，直接报错，请删除原先文件中的${key}"
        }
    })
    println ">>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    println ">>>>>>>>>>>打印HashMap>>>>>>>>>>>>>>>>>"
    hashMap.forEach({ key, value ->
        println "$key =*******= $value"
    })
    println ">>>>>>>>>>>结束HashMap>>>>>>>>>>>>>>>>>"
    //println xml
}